@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:color';
@use '../mixins/function' as *;

$types: primary, success, warning, danger, error, info;

$colors: () !default;
$colors: map.deep-merge(
                (
                        'white': #fff,
                        'black': #000,
                        'primary': (
                                'base': #409eff,
                        ),
                        'success': (
                                'base': #67c23a,
                        ),
                        'warning': (
                                'base': #e6a23c,
                        ),
                        'danger': (
                                'base': #f56c6c,
                        ),
                        'error': (
                                'base': #f56c6c,
                        ),
                        'info': (
                                'base': #909399,
                        ),
                ),
                $colors
);

$color-white: map.get($colors, 'white') !default;
$color-black: map.get($colors, 'black') !default;
$color-primary: map.get($colors, 'primary', 'base') !default;
$color-success: map.get($colors, 'success', 'base') !default;
$color-warning: map.get($colors, 'warning', 'base') !default;
$color-danger: map.get($colors, 'danger', 'base') !default;
$color-error: map.get($colors, 'error', 'base') !default;
$color-info: map.get($colors, 'info', 'base') !default;

@mixin set-color-mix-level(
  $type,
  $number,
  $mode: 'light',
  $mix-color: $color-white
) {
  // 确保 $colors 定义为一个映射
  $colors: if(meta.global-variable-exists(colors), $colors, ());

  // 获取基础颜色
  $base-color: map.get($colors, $type, 'base');
  @if $base-color == null {
    @error "Base color for '#{$type}' is not defined in \$colors.";
  }

  // 计算混合比例
  $percentage: math.percentage(math.div($number, 10));
  $mixed-color: color.mix($mix-color, $base-color, $percentage);

  // 更新映射值
  $new-color-key: '#{$mode}-#{$number}';
  $colors: map.deep-merge(
                  $colors,
                  (
                          $type: (
                                  $new-color-key: $mixed-color
                          )
                  )
  ) !global;
}

@each $type in $types {
  @for $i from 1 through 9 {
    @include set-color-mix-level($type, $i, 'light', $color-white);
  }
}

// --el-color-primary-dark-2
@each $type in $types {
  @include set-color-mix-level($type, 2, 'dark', $color-black);
}