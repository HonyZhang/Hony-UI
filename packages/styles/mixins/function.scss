@use 'config';
@use 'sass:meta';
@use "sass:string";

// BEM support Func
// 将传入的选择器从 SCSS 内部的对象格式转化为字符串，并移除两端的引号或额外字符。
@function selectorToString($selector) {
  $selector: meta.inspect($selector);
  $selector: string.slice($selector, 2, -2);
  @return $selector;
}

// 判断选择器是否包含 BEM 的 modifier 分隔符。
@function containsModifier($selector) {
  $selector: selectorToString($selector);

  @if string.index($selector, config.$modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

// 判断选择器是否包含表示状态的前缀（如 is-）。
@function containWhenFlag($selector) {
  $selector: selectorToString($selector);

  @if string.index($selector, '.' + config.$state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}

// 检查选择器中是否包含伪类（如 :hover、:focus 等）。
@function containPseudoClass($selector) {
  $selector: selectorToString($selector);

  @if string.index($selector, ':') {
    @return true;
  } @else {
    @return false;
  }
}

// 判断选择器是否符合 BEM 的任何一种特殊嵌套规则。
@function hitAllSpecialNestRule($selector) {
  @return containsModifier($selector) or containWhenFlag($selector) or
    containPseudoClass($selector);
}

// join var name
// joinVarName(('button', 'text-color')) => '--el-button-text-color'
@function joinVarName($list) {
  $name: '--' + config.$namespace;
  @each $item in $list {
    @if $item != '' {
      $name: $name + '-' + $item;
    }
  }
  @return $name;
}

// getCssVarName('button', 'text-color') => '--el-button-text-color'
@function getCssVarName($args...) {
  @return joinVarName($args);
}

// getCssVar('button', 'text-color') => var(--el-button-text-color)
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}

// getCssVar('button', 'text-color') => var(--el-button-text-color)
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}

// getCssVarName('button', 'text-color') => '--el-button-text-color'
@function getCssVarName($args...) {
  @return joinVarName($args);
}